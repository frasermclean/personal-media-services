name: pms

services:
  # qBittorrent bittorrent client
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - TORRENTING_PORT=54321
    ports:
      - 54321:54321
    volumes:
      - qbittorrent-config:/config
      - ${HOST_DOWNLOADS}:/data/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${DOMAIN}`)
      - traefik.http.routers.qbittorrent.tls.certresolver=cloudflare
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080

  # SABnzbd usenet downloader
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - sabnzbd-config:/config
      - ${HOST_DOWNLOADS}:/data/downloads
      - ${HOST_BACKUP}/sabnzbd:/backup
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAIN}`)
      - traefik.http.routers.sabnzbd.tls.certresolver=cloudflare
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080

  # Postgres database
  postgres:
    image: postgres:14
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${ADMIN_PASSWORD}
      - TZ=${TZ}
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # pgAdmin web interface for Postgres
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${ADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.${DOMAIN}`)
      - traefik.http.routers.pgadmin.tls.certresolver=cloudflare

  # Sonarr TV show manager
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - sonarr-config:/config
      - ${HOST_DOWNLOADS}:/data/downloads
      - ${HOST_MEDIA}/tv:/data/media/tv
      - ${HOST_BACKUP}/sonarr:/backup
    depends_on:
      - postgres
      - qbittorrent
      - sabnzbd
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)
      - traefik.http.routers.sonarr.tls.certresolver=cloudflare

  # Radarr movie manager
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - radarr-config:/config
      - ${HOST_DOWNLOADS}:/data/downloads
      - ${HOST_MEDIA}/movies:/data/media/movies
      - ${HOST_BACKUP}/radarr:/backup
    depends_on:
      - postgres
      - qbittorrent
      - sabnzbd
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)
      - traefik.http.routers.radarr.tls.certresolver=cloudflare

  # Lidarr music manager
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - lidarr-config:/config
      - ${HOST_DOWNLOADS}:/data/downloads
      - ${HOST_MEDIA}/music:/data/media/music
      - ${HOST_BACKUP}/lidarr:/backup
    depends_on:
      - postgres
      - qbittorrent
      - sabnzbd
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)
      - traefik.http.routers.lidarr.tls.certresolver=cloudflare

  # Prowlarr indexer manager
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - prowlarr-config:/config
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN}`)
      - traefik.http.routers.prowlarr.tls.certresolver=cloudflare

  # Plex media server
  plex:
    image: lscr.io/linuxserver/plex:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
    volumes:
      - plex-config:/config
      - ${HOST_MEDIA}:/data/media
      - ${HOST_BACKUP}/plex:/backup

networks:
  default:
    name: pms

volumes:
  qbittorrent-config:
    driver: local
  sabnzbd-config:
    driver: local
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
  sonarr-config:
    driver: local
  radarr-config:
    driver: local
  lidarr-config:
    driver: local
  prowlarr-config:
    driver: local
  plex-config:
    driver: local
